/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        cret {
            bindings = <&kp ENTER>;
            key-positions = <55 54>;
        };

        cesc {
            bindings = <&kp ESCAPE>;
            key-positions = <50 51>;
        };
    };

    behaviors {
        tht: tht {
            compatible = "zmk,behavior-hold-tap";
            label = "THT";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <350>;
            quick-tap-ms = <200>;
            hold-while-undecided;
        };

        volley_r: volley_r {
            compatible = "zmk,behavior-hold-tap";
            label = "VOLLEY_R";
            #binding-cells = <2>;
            bindings = <&kp>, <&mo>;

            flavor = "hold-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 17 16 15 14 13 12 24 25 26 27 28 29 41 40 39 38 37 36 42 43 55 53 52 51 50 54>;
            tapping-term-ms = <500>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };

        tht_caps: tht_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "THT_CAPS";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;

            require-prior-idle-ms = <300>;
            quick-tap-ms = <200>;
            hold-while-undecided;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 43 50 51 52 53 54 55>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 43 50 51 52 53 54 55>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LA(LC(LGUI))) GRAVE  &kp N1  &kp N2  &kp N3  &kp N4              &kp N5                                               &kp N6             &kp N7                        &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB                     &kp Q   &kp W   &kp E   &kp R               &kp T                                                &kp Y              &kp U                         &kp I      &kp O    &kp P     &kp EQUAL
&mt LCTRL ESCAPE            &kp A   &kp S   &kp D   &kp F               &kp G                                                &kp H              &kp J                         &kp K      &kp L    &kp SEMI  &kp SQT
&mo 9                       &kp Z   &kp X   &kp C   &kp V               &kp B      &kp ESC              &kp ENTER            &kp N              &kp M                         &kp COMMA  &kp DOT  &kp FSLH  &kp MINUS
                                                    &tht LCTRL LG(TAB)  &kp LSHFT  &tht LGUI BACKSPACE  &tht LEFT_ALT SPACE  &volley_r RSHFT 6  &tht_caps LS(LA(LC(LGUI))) 0
            >;
        };

        hrm_layer {
            bindings = <
&trans  &trans          &trans         &trans         &trans                     &trans                         &trans         &trans                     &trans         &trans             &trans             &trans
&trans  &trans          &trans         &trans         &trans                     &trans                         &trans         &trans                     &trans         &trans             &trans             &trans
&trans  &hrm_l LCTRL A  &hrm_l LALT S  &hrm_l LGUI D  &trans                     &hrm_l RALT G                  &hrm_r RALT H  &trans                     &hrm_r LGUI K  &hrm_r LG(LALT) L  &hrm_r LCTRL SEMI  &trans
&trans  &trans          &trans         &trans         &hrm_l LS(LA(LC(LGUI))) V  &trans         &trans  &trans  &trans         &hrm_r LS(LA(LC(LGUI))) M  &trans         &trans             &trans             &trans
                                                      &trans                     &trans         &trans  &trans  &trans         &trans
            >;
        };

        cdh_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans     &trans   &trans    &trans
&trans  &kp Q   &kp W   &kp F   &kp P   &kp B                   &kp J   &kp L   &kp U      &kp Y    &kp SEMI  &trans
&trans  &kp A   &kp R   &kp S   &kp T   &kp G                   &kp M   &kp N   &kp E      &kp I    &kp O     &trans
&trans  &kp Z   &kp X   &kp C   &kp D   &kp V   &trans  &trans  &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        cdh_hrm_layer {
            bindings = <
&trans  &trans          &trans         &trans         &trans                     &trans                         &trans         &trans                     &trans         &trans             &trans              &trans
&trans  &trans          &trans         &trans         &trans                     &trans                         &trans         &trans                     &trans         &trans             &trans              &trans
&trans  &hrm_l LCTRL A  &hrm_l LALT R  &hrm_l LGUI S  &trans                     &hrm_l RALT G                  &hrm_r RALT M  &trans                     &hrm_r LGUI E  &hrm_r LG(LALT) I  &hrm_r LCTRL LG(O)  &trans
&trans  &trans          &trans         &trans         &hrm_l LS(LA(LC(LGUI))) D  &trans         &trans  &trans  &trans         &hrm_r LS(LA(LC(LGUI))) H  &trans         &trans             &trans              &trans
                                                      &trans                     &trans         &trans  &trans  &trans         &trans
            >;
        };

        hmr_hard_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans   &trans                            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans                            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans                            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans  &trans         &trans     &trans  &trans  &trans  &trans  &trans  &trans
                                &kp TAB  &trans  &kp BACKSPACE  &kp SPACE  &trans  &trans
            >;
        };

        lh_mods {
            bindings = <
&trans  &trans     &trans    &trans            &trans                 &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &trans            &trans                 &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI          &sk LSHFT              &sk RALT                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans    &sk LC(LA(LGUI))  &sk LA(LC(LG(LSHFT)))  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                               &trans                 &trans    &trans  &trans  &trans  &trans
            >;
        };

        extend_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans    &trans     &trans     &trans     &trans         &bootloader
&trans  &trans  &trans  &trans  &trans  &trans                  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LBKT  &kp RBKT   &kp LBRC   &kp RBRC   &kp BACKSLASH  &trans
                                &mo 10  &trans  &trans  &trans  &trans    &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                                &trans  &trans  &trans  &trans  &trans  &kp N0
            >;
        };

        sym_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&bootloader  &tog 2      &tog 1        &tog 4        &tog 11  &rgb_ug RGB_TOG                  &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans      &trans        &trans        &trans   &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans   &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans       &kp C_PREV  &kp C_PP      &kp C_NEXT    &trans   &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                     &trans   &trans           &trans  &trans  &trans  &trans
            >;
        };

        fn_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp F10  &kp F11  &kp F12  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp F7   &kp F8   &kp F9   &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp F4   &kp F5   &kp F6   &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F1   &kp F2   &kp F3   &kp F12  &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        reduce_layer {
            bindings = <
&none   &none   &none   &none   &none   &none                   &none   &none   &none   &none   &none   &none
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        reduce_ex_layer {
            bindings = <
&none  &none   &none   &none   &none   &none                   &none   &none   &none   &none   &none   &none
&none  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &none   &none   &trans  &trans  &trans  &trans  &trans  &none
                               &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        lh_mods_extend {
            if-layers = <6>;
            then-layer = <6>;
        };

        lh_mods_num {
            if-layers = <7>;
            then-layer = <6>;
        };

        lh_mods_fn {
            if-layers = <10>;
            then-layer = <6>;
        };

        cdh_hrm {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
